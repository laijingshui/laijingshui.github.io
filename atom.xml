<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-21T06:38:31.597Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>读《分布式技术原理与算法解析》有感</title>
    <link href="http://yoursite.com/2019/10/17/%E8%AF%BB%E3%80%8A%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90%E3%80%8B%E6%9C%89%E6%84%9F/"/>
    <id>http://yoursite.com/2019/10/17/读《分布式技术原理与算法解析》有感/</id>
    <published>2019-10-17T05:34:10.367Z</published>
    <updated>2019-10-21T06:38:31.597Z</updated>
    
    <content type="html"><![CDATA[<p>说明：本文所有内容来源于学习<strong>极客时间 分布式技术原理与算法解析</strong> ，当然也有自己理解。</p><p>​    购买地址：<a href="https://time.geekbang.org/column/intro/233" target="_blank" rel="noopener">https://time.geekbang.org/column/intro/233</a></p><h2 id="1-分布式发展历程"><a href="#1-分布式发展历程" class="headerlink" title="1.分布式发展历程"></a>1.分布式发展历程</h2><h3 id="1-1初始阶段"><a href="#1-1初始阶段" class="headerlink" title="1.1初始阶段"></a>1.1初始阶段</h3><p>​        最初项目刚起步，用户不是特别多，数据规模也不大，但是要求快速上线，抢占市场，这个时候往往采用数据和系统在一起的方式，将他们部署在一台服务器上。</p><p>​     主要面临的问题：性能受限，存在单点。</p><p>​     主要解决的问题:  满足公司发展战略，快速上线，抢占市场。</p><h3 id="1-2-成长过程"><a href="#1-2-成长过程" class="headerlink" title="1.2 成长过程"></a>1.2 成长过程</h3><p>​        随着业务发展，用户访问越来越多，数据逐渐积累。系统满足不了性能要求以及业务要求。从数据与程序分离，同时为了支持更多的请求访问，部署系统到多台服务器组成集群。这样数据并行，将请求分发到不同的服务器上，增加整个系统的吞吐量，但是没有解决单个请求的处理时间。</p><p>​      同时也可能基于任务拆分，实现多任务并行。解决单个请求处理时间。这样也增加了设计上的复杂性，例如复杂的业务拆分。</p><p>​        在实际项目中，经常是两种情况并行，任务并行和数据并行</p><h2 id="2-分布式性能指标"><a href="#2-分布式性能指标" class="headerlink" title="2.分布式性能指标"></a>2.分布式性能指标</h2><h3 id="2-1-吞吐量"><a href="#2-1-吞吐量" class="headerlink" title="2.1 吞吐量"></a>2.1 吞吐量</h3><p>​         系统在一定时间内可以处理的任务数。 </p><ol><li>QPS: ：每秒查询数。 用于衡量一个系统每秒处理的查询数。这个指标通常用于读操作，越高说明对读操作的支持越好。 </li><li>TPS：即事务数每秒，用于衡量一个系统每秒处理的事务数。这个指标通常对应于写操作，越高说明对写操作的支持越好。 </li><li>BPS：即比特数每秒，用于衡量一个系统每秒处理的数据量。     </li></ol><h3 id="2-2-响应时间"><a href="#2-2-响应时间" class="headerlink" title="2.2 响应时间"></a>2.2 响应时间</h3><p>​        系统响应一个请求或输入需要花费的时间。响应时间直接影响到用户体验，对于时延敏感的业务非常重要。 </p><h3 id="2-3-完成时间"><a href="#2-3-完成时间" class="headerlink" title="2.3 完成时间"></a>2.3 完成时间</h3><p>​       系统真正完成一个请求或处理需要花费的时间。任务并行（也叫作任务分布式）模式出现的其中一个目的，就是缩短整个任务的完成时间。特别是需要计算海量数据或处理大规模任务时，用户对完成时间的感受非常明显。 </p><h3 id="2-4-资源占用"><a href="#2-4-资源占用" class="headerlink" title="2.4 资源占用"></a>2.4 资源占用</h3><p>​        资源占用指的是，一个系统提供正常能力需要占用的硬件资源，比如CPU、内存、硬盘等。</p><ol><li>空载资源占用: 一个系统在没有任何负载时的资源占用。体现了这个系统自身的资源占用情况。比如，你在手机上安装一个App，安装的时候通常会提示你有多少KB，这就是该App的空载硬盘资源占用。对于同样的功能，空载资源占用越少，说明系统设计越优秀，越容易被用户接受。</li><li>满载资源占用：一个系统满额负载时的资源占用。体现了这个系统全力运行时占用资源的情况，也体现了系统的处理能力。同样的硬件配置上，运行的业务越多，资源占用越少，说明这个系统设计得越好。</li></ol><h3 id="2-5-可用性"><a href="#2-5-可用性" class="headerlink" title="2.5 可用性"></a>2.5 可用性</h3><p>​         系统的可用性可以用系统停止服务的时间与总的时间之比衡量。 </p><h3 id="2-6-可扩展性"><a href="#2-6-可扩展性" class="headerlink" title="2.6 可扩展性"></a>2.6 可扩展性</h3><pre><code>分布式系统通过扩展集群机器规模提高系统性能(吞吐、响应时间、 完成时间)、存储容量、计算能力的特性，是分布式系统的特有性质。 </code></pre><p>​         <strong>当任务的需求随着具体业务不断提高时，除了升级系统的性能做垂直/纵向扩展外，另一个做法就是通过增加机器的方式去水平/横向扩展系统规模。</strong> </p><h2 id="3-分布式互斥"><a href="#3-分布式互斥" class="headerlink" title="3.分布式互斥"></a>3.分布式互斥</h2><p><img src="https://laijingshui.github.io/img/1571295189643.png" alt="1571295189643"></p><p>​             分布式互斥算法是为了保证同一时间只有一个程序访问临界资源。  </p><h2 id="4-分布式选举算法"><a href="#4-分布式选举算法" class="headerlink" title="4.分布式选举算法"></a>4.分布式选举算法</h2><p>分布式选举算法是为了保证数据一致性的。</p><p>​    常用选举方法：(1)基于序号选举的算法(比如，Bully算法)。(2)多数派算法（比如，Raft算法、ZAB算法）</p><h3 id="4-1基于序号选举的算法"><a href="#4-1基于序号选举的算法" class="headerlink" title="4.1基于序号选举的算法"></a>4.1基于序号选举的算法</h3><h5 id="5-1-1-Bully算法"><a href="#5-1-1-Bully算法" class="headerlink" title="5.1.1 Bully算法"></a>5.1.1 Bully算法</h5><p>​    它的假设条件是，集群中每个节点均知道其他节点的ID。自己维护了包含其它节点id的集合，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;说明：本文所有内容来源于学习&lt;strong&gt;极客时间 分布式技术原理与算法解析&lt;/strong&gt; ，当然也有自己理解。&lt;/p&gt;
&lt;p&gt;​    购买地址：&lt;a href=&quot;https://time.geekbang.org/column/intro/233&quot; target=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>自动化部署总结</title>
    <link href="http://yoursite.com/2019/10/17/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/10/17/自动化部署总结/</id>
    <published>2019-10-17T00:10:18.901Z</published>
    <updated>2019-10-21T06:02:11.741Z</updated>
    
    <content type="html"><![CDATA[<p><img src="imgs%5C1571619214488.png" alt="1571619214488"></p><h2 id="1-基础软件安装"><a href="#1-基础软件安装" class="headerlink" title="1.基础软件安装"></a>1.基础软件安装</h2><h3 id="1-1docker安装"><a href="#1-1docker安装" class="headerlink" title="1.1docker安装"></a>1.1docker安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(1)安装：</span><br><span class="line">重装:yum remove docker docker-common docker-selinux docker-engine</span><br><span class="line">删除: docker镜像sudu yum remove docker-ce</span><br><span class="line">docker容器:sudo rm -rf /var/ib/docker</span><br><span class="line"><span class="meta">#</span><span class="bash">建立docker用户,只有root和docker组用户才可以访问docker引擎得socket</span></span><br><span class="line">sudo groupadd docker#建立docker组</span><br><span class="line">sudo usermod -aG docker $USER#将当前用户加入到docker组</span><br><span class="line">安装：</span><br><span class="line">yum provides '*/applydeltarpm'  </span><br><span class="line">yum install deltarpm -y</span><br><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh --mirror Aliyun</span><br><span class="line">sudo systemctl enable docker</span><br><span class="line">(2)采用阿里云docker镜像加速(进入阿里云控制台搜索容器镜像服务加速器)</span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"><span class="meta">#</span><span class="bash">可以使用网易得</span></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class="line">&#123;</span><br><span class="line">  "registry-mirrors": ["http://hub-mirror.c.163.com"]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl restart daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="1-2安装gitlab"><a href="#1-2安装gitlab" class="headerlink" title="1.2安装gitlab"></a>1.2安装gitlab</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">  --hostname gitlab.lailai.com \</span><br><span class="line">  --publish 443:443 --publish 80:80 --publish 13800:22 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume /srv/gitlab/config:/etc/gitlab \</span><br><span class="line">  --volume /srv/gitlab/logs:/var/log/gitlab \</span><br><span class="line">  --volume /srv/gitlab/data:/var/opt/gitlab \</span><br><span class="line">  gitlab/gitlab-ce:latest</span><br><span class="line"><span class="meta">  #</span><span class="bash">若没有关闭防火墙，那么需要开放13800端口</span></span><br><span class="line">  firewall-cmd --add-port=13800/tcp --permanent</span><br><span class="line"><span class="meta">  #</span><span class="bash">这里注意free -h查看可用内存大小，2G不够就来3G，若出现502，但是发现内存足够，ctrl+F5刷新几次就好了</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;imgs%5C1571619214488.png&quot; alt=&quot;1571619214488&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-基础软件安装&quot;&gt;&lt;a href=&quot;#1-基础软件安装&quot; class=&quot;headerlink&quot; title=&quot;1.基础软件安装&quot;&gt;&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>博客搭建</title>
    <link href="http://yoursite.com/2019/10/17/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/10/17/博客搭建/</id>
    <published>2019-10-16T22:56:16.000Z</published>
    <updated>2019-10-16T22:58:13.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p>网址：<a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a></p><p>部署网址：<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">https://github.com/hexojs/hexo-deployer-git</a></p><p>详细博客：<a href="https://blog.csdn.net/grave2015/article/details/79961843" target="_blank" rel="noopener">https://blog.csdn.net/grave2015/article/details/79961843</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure><p>新建一个github仓库，仓库命名规则用户名.github.io</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># You can use this:</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:自己github名字/自己github名字.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  name: 自己github名字</span><br><span class="line">  email: 自己的邮箱@qq.com</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#ssh配置</span><br><span class="line">ssh-keygen -t rsa -b 4096 -C &apos;自己的邮箱@qq.com&apos;</span><br><span class="line"></span><br><span class="line">hexo g #产生一些静态文件</span><br><span class="line">hexo d #部署到git仓库</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; title=&quot;1.安装&quot;&gt;&lt;/a&gt;1.安装&lt;/h2&gt;&lt;p&gt;网址：&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;h
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
